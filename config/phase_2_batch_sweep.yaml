# Phase 2: Batch Scaling Validation Experiment
# Goal: Empirically validate LR ∝ Batch^(2/3) scaling (α=3, Laplace)
# vs standard LR ∝ Batch^(1/2) scaling (Gaussian assumption)

experiment:
  name: "phase_2_batch_scaling"
  seed: 42
  output_dir: "outputs/phase_2"
  description: "Batch scaling validation: Test LR_opt vs Batch relationship"

model:
  type: "nano_transformer"
  d_model: 64
  n_layers: 4
  n_heads: 4
  vocab_size: 65  # TinyShakespeare vocabulary
  seq_length: 256
  dropout: 0.0

training:
  steps: 5000  # Shorter than Phase 1 for speed
  optimizer: "adamw"
  betas: [0.9, 0.999]
  weight_decay: 0.01
  warmup_steps: 100  # 2% of training
  grad_clip: 1.0

  # Convergence criteria
  eval_interval: 100
  convergence_window: 100  # Average final 100 steps
  convergence_threshold: 0.01  # Loss std < 0.01 for convergence

batch_sweep:
  # Test 7 batch sizes covering 6x range (8 → 512)
  batch_sizes: [8, 16, 32, 64, 128, 256, 512]

  # Test 7 LR values per batch size
  lr_candidates: [0.00003, 0.0001, 0.0003, 0.001, 0.003, 0.01, 0.03]

  # Total experiments: 7 batch sizes × 7 LR values = 49 configs
  # Expected runtime: ~12 hours on GPU (49 × 5000 steps × ~15 sec)

dataset:
  num_sequences: 10000  # Total training sequences
  pattern: "random"  # Random token sequences
  # Note: Using synthetic token sequences (same as Phase 1)
  # Actual dataset is generated on-the-fly

logging:
  use_wandb: true
  wandb_project: "laplace-scaling-phase2"
  wandb_entity: null  # Use default
  log_interval: 50
  save_checkpoints: false  # Don't save checkpoints for all 49 configs

  # Save results to CSV for analysis
  save_results_csv: true
  results_file: "results.csv"

# Analysis settings (used by phase_2_analysis.py)
analysis:
  # Power law fit: LR_opt = C · Batch^β
  fit_method: "log_log_regression"

  # Expected scaling exponents
  laplace_beta: 0.667  # α=3: β = 1 - 1/3 = 2/3
  gaussian_beta: 0.500  # α=∞: β = 1/2

  # Success criteria
  laplace_range: [0.60, 0.74]  # If β in this range → Laplace confirmed
  gaussian_range: [0.45, 0.55]  # If β in this range → Gaussian behavior

  # Transfer test settings
  baseline_batch: 256
  baseline_lr: 0.001
